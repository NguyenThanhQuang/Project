export interface MockTrip {
  _id: string;
  from: string;
  to: string;
  departureTime: string;
  arrivalTime: string;
  expectedArrivalTime: string;
  price: number;
  availableSeats: number;
  company: {
    name: string;
    _id: string;
  };
  seats?: any[];
  status?: string;
}

// Sample trips data for testing
const sampleTripsData = [
  {
    _id: 'mock-trip-1',
    from: 'H√† N·ªôi',
    to: 'TP. H·ªì Ch√≠ Minh',
    departureTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Tomorrow
    expectedArrivalTime: new Date(Date.now() + 24 * 60 * 60 * 1000 + 8 * 60 * 60 * 1000).toISOString(), // 8 hours later
    price: 500000,
    availableSeats: 45,
    company: { name: 'Nh√† xe Ph∆∞∆°ng Trang', _id: 'mock-company-1' },
    seats: generateMockSeats(45, 500000),
    route: {
      fromLocationId: { name: 'B·∫øn xe M·ªπ ƒê√¨nh', province: 'H√† N·ªôi' },
      toLocationId: { name: 'B·∫øn xe Mi·ªÅn ƒê√¥ng', province: 'TP. H·ªì Ch√≠ Minh' },
      stops: []
    },
    companyId: { name: 'Nh√† xe Ph∆∞∆°ng Trang', _id: 'mock-company-1' },
    vehicleId: { type: 'Xe kh√°ch 45 ch·ªó', totalSeats: 45, _id: 'mock-vehicle-1' },
    status: 'scheduled'
  },
  {
    _id: 'mock-trip-2',
    from: 'TP. H·ªì Ch√≠ Minh',
    to: 'H√† N·ªôi',
    departureTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(), // Day after tomorrow
    expectedArrivalTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000 + 8 * 60 * 60 * 1000).toISOString(),
    price: 450000,
    availableSeats: 35,
    company: { name: 'Nh√† xe Ho√†ng Long', _id: 'mock-company-2' },
    seats: generateMockSeats(35, 450000),
    route: {
      fromLocationId: { name: 'B·∫øn xe Mi·ªÅn ƒê√¥ng', province: 'TP. H·ªì Ch√≠ Minh' },
      toLocationId: { name: 'B·∫øn xe M·ªπ ƒê√¨nh', province: 'H√† N·ªôi' },
      stops: []
    },
    companyId: { name: 'Nh√† xe Ho√†ng Long', _id: 'mock-company-2' },
    vehicleId: { type: 'Xe kh√°ch 35 ch·ªó', totalSeats: 35, _id: 'mock-vehicle-2' },
    status: 'scheduled'
  },
  {
    _id: 'mock-trip-3',
    from: 'TP. H·ªì Ch√≠ Minh',
    to: 'ƒê√† L·∫°t',
    departureTime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
    expectedArrivalTime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000 + 6 * 60 * 60 * 1000).toISOString(),
    price: 300000,
    availableSeats: 29,
    company: { name: 'Nh√† xe Mai Linh', _id: 'mock-company-3' },
    seats: generateMockSeats(29, 300000),
    route: {
      fromLocationId: { name: 'B·∫øn xe Mi·ªÅn ƒê√¥ng', province: 'TP. H·ªì Ch√≠ Minh' },
      toLocationId: { name: 'B·∫øn xe ƒê√† L·∫°t', province: 'L√¢m ƒê·ªìng' },
      stops: []
    },
    companyId: { name: 'Nh√† xe Mai Linh', _id: 'mock-company-3' },
    vehicleId: { type: 'Xe kh√°ch 29 ch·ªó', totalSeats: 29, _id: 'mock-vehicle-3' },
    status: 'scheduled'
  },
  {
    _id: 'mock-trip-4',
    from: 'H√† N·ªôi',
    to: 'H·∫£i Ph√≤ng',
    departureTime: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000).toISOString(),
    expectedArrivalTime: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000 + 2 * 60 * 60 * 1000).toISOString(),
    price: 150000,
    availableSeats: 16,
    company: { name: 'Nh√† xe Th√†nh B∆∞·ªüi', _id: 'mock-company-4' },
    seats: generateMockSeats(16, 150000),
    route: {
      fromLocationId: { name: 'B·∫øn xe M·ªπ ƒê√¨nh', province: 'H√† N·ªôi' },
      toLocationId: { name: 'B·∫øn xe H·∫£i Ph√≤ng', province: 'H·∫£i Ph√≤ng' },
      stops: []
    },
    companyId: { name: 'Nh√† xe Th√†nh B∆∞·ªüi', _id: 'mock-company-4' },
    vehicleId: { type: 'Xe limousine', totalSeats: 16, _id: 'mock-vehicle-4' },
    status: 'scheduled'
  },
  {
    _id: 'mock-trip-5',
    from: 'TP. H·ªì Ch√≠ Minh',
    to: 'Nha Trang',
    departureTime: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(),
    expectedArrivalTime: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000 + 7 * 60 * 60 * 1000).toISOString(),
    price: 400000,
    availableSeats: 40,
    company: { name: 'Nh√† xe Kumho', _id: 'mock-company-5' },
    seats: generateMockSeats(40, 400000),
    route: {
      fromLocationId: { name: 'B·∫øn xe Mi·ªÅn ƒê√¥ng', province: 'TP. H·ªì Ch√≠ Minh' },
      toLocationId: { name: 'B·∫øn xe Nha Trang', province: 'Kh√°nh H√≤a' },
      stops: []
    },
    companyId: { name: 'Nh√† xe Kumho', _id: 'mock-company-5' },
    vehicleId: { type: 'Xe gi∆∞·ªùng n·∫±m', totalSeats: 40, _id: 'mock-vehicle-5' },
    status: 'scheduled'
  }
];

function generateMockSeats(totalSeats: number, price: number) {
  const seats = [];
  for (let i = 1; i <= totalSeats; i++) {
    const row = Math.ceil(i / 4);
    const col = ((i - 1) % 4) + 1;
    const seatNumber = `${String.fromCharCode(64 + row)}${col}`;
    
    seats.push({
      _id: `seat-${i}`,
      seatNumber,
      status: Math.random() > 0.3 ? 'available' : 'booked', // 70% available
      price,
      isWindow: col === 1 || col === 4,
      isAisle: col === 2 || col === 3,
      row,
      column: col
    });
  }
  return seats;
}

// Helper function to normalize city names for better matching
const normalizeCityName = (cityName: string): string => {
  return cityName
    .toLowerCase()
    .trim()
    .replace(/tp\./g, 'tp') // Remove dots
    .replace(/\./g, '') // Remove all dots
    .replace(/\s+/g, ' ') // Normalize spaces
    .replace(/h·ªì ch√≠ minh/g, 'ho chi minh') // Normalize H·ªì Ch√≠ Minh
    .replace(/ho chi minh/g, 'hcm') // Short form
    .replace(/h√† n·ªôi/g, 'ha noi') // Normalize H√† N·ªôi
    .replace(/ƒë√† l·∫°t/g, 'da lat') // Normalize ƒê√† L·∫°t
    .replace(/h·∫£i ph√≤ng/g, 'hai phong') // Normalize H·∫£i Ph√≤ng
    .replace(/nha trang/g, 'nha trang') // Normalize Nha Trang
    .replace(/c·∫ßn th∆°/g, 'can tho') // Normalize C·∫ßn Th∆°
    .replace(/phan thi·∫øt/g, 'phan thiet') // Normalize Phan Thi·∫øt
    .replace(/v≈©ng t√†u/g, 'vung tau') // Normalize V≈©ng T√†u
    .replace(/sapa/g, 'sa pa') // Normalize Sapa
    .replace(/b√† r·ªãa/g, 'ba ria') // Normalize B√† R·ªãa
    .replace(/b√¨nh thu·∫≠n/g, 'binh thuan') // Normalize B√¨nh Thu·∫≠n
    .replace(/kh√°nh h√≤a/g, 'khanh hoa') // Normalize Kh√°nh H√≤a
    .replace(/l√†o cai/g, 'lao cai') // Normalize L√†o Cai
    .replace(/l√¢m ƒë·ªìng/g, 'lam dong') // Normalize L√¢m ƒê·ªìng
    .replace(/c·∫ßn th∆°/g, 'can tho'); // Normalize C·∫ßn Th∆°
};

// Helper function to check if two city names match
const cityNamesMatch = (searchTerm: string, tripCity: string): boolean => {
  const normalizedSearch = normalizeCityName(searchTerm);
  const normalizedTrip = normalizeCityName(tripCity);
  
  console.log(`üîç Comparing: "${searchTerm}" (${normalizedSearch}) vs "${tripCity}" (${normalizedTrip})`);
  
  // Check for exact match
  if (normalizedSearch === normalizedTrip) {
    console.log('‚úÖ Exact match');
    return true;
  }
  
  // Check if one contains the other
  if (normalizedSearch.includes(normalizedTrip) || normalizedTrip.includes(normalizedSearch)) {
    console.log('‚úÖ Contains match');
    return true;
  }
  
  // Check for common abbreviations and variations
  const abbreviations: { [key: string]: string[] } = {
    'hcm': ['ho chi minh', 'tp ho chi minh', 'tp. ho chi minh', 'tp ho chi minh'],
    'ha noi': ['h√† n·ªôi', 'ha noi'],
    'da lat': ['ƒë√† l·∫°t', 'da lat'],
    'hai phong': ['h·∫£i ph√≤ng', 'hai phong'],
    'nha trang': ['nha trang'],
    'can tho': ['c·∫ßn th∆°', 'can tho'],
    'phan thiet': ['phan thi·∫øt', 'phan thiet'],
    'vung tau': ['v≈©ng t√†u', 'vung tau'],
    'sa pa': ['sapa', 'sa pa'],
    'ba ria': ['b√† r·ªãa', 'ba ria'],
    'binh thuan': ['b√¨nh thu·∫≠n', 'binh thuan'],
    'khanh hoa': ['kh√°nh h√≤a', 'khanh hoa'],
    'lao cai': ['l√†o cai', 'lao cai'],
    'lam dong': ['l√¢m ƒë·ªìng', 'lam dong']
  };
  
  // Check if search term is an abbreviation
  if (abbreviations[normalizedSearch]) {
    const match = abbreviations[normalizedSearch].some(alt => 
      normalizedTrip.includes(alt) || alt.includes(normalizedTrip)
    );
    if (match) {
      console.log('‚úÖ Abbreviation match (search term)');
      return true;
    }
  }
  
  // Check if trip city is an abbreviation
  if (abbreviations[normalizedTrip]) {
    const match = abbreviations[normalizedTrip].some(alt => 
      normalizedSearch.includes(alt) || alt.includes(normalizedSearch)
    );
    if (match) {
      console.log('‚úÖ Abbreviation match (trip city)');
      return true;
    }
  }
  
  // Additional fuzzy matching for common variations
  const searchWords = normalizedSearch.split(' ');
  const tripWords = normalizedTrip.split(' ');
  
  // Check if most words match
  const matchingWords = searchWords.filter(word => 
    tripWords.some(tripWord => 
      word.includes(tripWord) || tripWord.includes(word)
    )
  );
  
  if (matchingWords.length >= Math.min(searchWords.length, tripWords.length) * 0.7) {
    console.log('‚úÖ Fuzzy match');
    return true;
  }
  
  console.log('‚ùå No match');
  return false;
};

export const generateMockTrips = (from: string, to: string, date: string): MockTrip[] => {
  console.log('üîç generateMockTrips called with:', { from, to, date });
  
  // Filter sample trips based on search criteria
  let filteredTrips = sampleTripsData;
  
  if (from && to) {
    console.log('üîç Searching for:', { from, to });
    
    filteredTrips = sampleTripsData.filter(trip => {
      const fromMatch = cityNamesMatch(from, trip.from);
      const toMatch = cityNamesMatch(to, trip.to);
      
      console.log(`üîç Trip: ${trip.from} ‚Üí ${trip.to}`, { fromMatch, toMatch });
      
      return fromMatch && toMatch;
    });
  } else if (from) {
    filteredTrips = sampleTripsData.filter(trip => {
      return cityNamesMatch(from, trip.from);
    });
  } else if (to) {
    filteredTrips = sampleTripsData.filter(trip => {
      return cityNamesMatch(to, trip.to);
    });
  }
  
  console.log('üîç Filtered trips count:', filteredTrips.length);
  
  // If no matches found, return all trips
  if (filteredTrips.length === 0) {
    console.log('üîç No matches found, returning all trips');
    filteredTrips = sampleTripsData;
  }
  
  return filteredTrips.map(trip => ({
    ...trip,
    arrivalTime: trip.expectedArrivalTime // Add arrivalTime for compatibility
  }));
};
