import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Typography,
  Paper,
  Button,
  Alert,
  CircularProgress,
  Divider,
  Card,
  CardContent,
} from '@mui/material';
import {
  Email,
  CheckCircle,
  ErrorOutline,
  Refresh,
  ArrowBack,
  Schedule,
  Security,
} from '@mui/icons-material';
import { useNavigate, useSearchParams } from 'react-router-dom';

const EmailVerification: React.FC = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [status, setStatus] = useState<'loading' | 'success' | 'error' | 'expired'>('loading');
  const [message, setMessage] = useState('');
  const [countdown, setCountdown] = useState(30);
  const [canResend, setCanResend] = useState(false);

  const email = searchParams.get('email') || 'example@email.com';
  const token = searchParams.get('token');

  useEffect(() => {
    // Simulate verification process
    const verifyEmail = async () => {
      try {
        // Simulate API call delay
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Simulate different verification outcomes
        if (token === 'expired') {
          setStatus('expired');
          setMessage('Li√™n k·∫øt x√°c th·ª±c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i email x√°c th·ª±c.');
        } else if (token === 'invalid') {
          setStatus('error');
          setMessage('Li√™n k·∫øt x√°c th·ª±c kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i email ho·∫∑c y√™u c·∫ßu g·ª≠i l·∫°i.');
        } else {
          setStatus('success');
          setMessage('Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n.');
          // Auto redirect after 5 seconds
          setTimeout(() => navigate('/'), 5000);
        }
      } catch (error) {
        setStatus('error');
        setMessage('C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    };

    verifyEmail();
  }, [token, navigate]);

  // Countdown timer for resend button
  useEffect(() => {
    if (countdown > 0 && (status === 'expired' || status === 'error')) {
      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);
      return () => clearTimeout(timer);
    } else if (countdown === 0) {
      setCanResend(true);
    }
  }, [countdown, status]);

  const handleResendEmail = async () => {
    setCanResend(false);
    setCountdown(30);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      setMessage('Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i l·∫°i! Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.');
    } catch (error) {
      setMessage('C√≥ l·ªói x·∫£y ra khi g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const renderContent = () => {
    switch (status) {
      case 'loading':
        return (
          <Box sx={{ textAlign: 'center' }}>
            <CircularProgress size={48} sx={{ mb: 3 }} />
            <Typography variant="h5" sx={{ fontWeight: 600, mb: 2 }}>
              ƒêang x√°c th·ª±c email...
            </Typography>
            <Typography variant="body1" color="text.secondary">
              Vui l√≤ng ch·ªù trong gi√¢y l√°t
            </Typography>
          </Box>
        );

      case 'success':
        return (
          <Box sx={{ textAlign: 'center' }}>
            <CheckCircle sx={{ fontSize: 64, color: 'success.main', mb: 3 }} />
            <Typography variant="h4" sx={{ fontWeight: 700, mb: 2, color: 'success.main' }}>
              X√°c th·ª±c th√†nh c√¥ng!
            </Typography>
            <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
              {message}
            </Typography>
            <Alert severity="success" sx={{ mb: 3 }}>
              B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß trong 5 gi√¢y...
            </Alert>
            <Button
              variant="contained"
              size="large"
              onClick={() => navigate('/')}
              sx={{
                py: 1.5,
                px: 4,
                fontWeight: 700,
                background: 'linear-gradient(135deg, #0077be 0%, #004c8b 100%)',
                '&:hover': {
                  background: 'linear-gradient(135deg, #004c8b 0%, #003366 100%)',
                },
              }}
            >
              ƒêi ƒë·∫øn trang ch·ªß
            </Button>
          </Box>
        );

      case 'error':
        return (
          <Box sx={{ textAlign: 'center' }}>
            <ErrorOutline sx={{ fontSize: 64, color: 'error.main', mb: 3 }} />
            <Typography variant="h4" sx={{ fontWeight: 700, mb: 2, color: 'error.main' }}>
              X√°c th·ª±c th·∫•t b·∫°i
            </Typography>
            <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
              {message}
            </Typography>
            <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>
              <Button
                variant="contained"
                startIcon={<Refresh />}
                onClick={handleResendEmail}
                disabled={!canResend}
                sx={{
                  py: 1.5,
                  px: 3,
                  fontWeight: 600,
                  background: 'linear-gradient(135deg, #0077be 0%, #004c8b 100%)',
                  '&:hover': {
                    background: 'linear-gradient(135deg, #004c8b 0%, #003366 100%)',
                  },
                }}
              >
                {canResend ? 'G·ª≠i l·∫°i email' : `G·ª≠i l·∫°i (${countdown}s)`}
              </Button>
              <Button
                variant="outlined"
                startIcon={<ArrowBack />}
                onClick={() => navigate('/')}
                sx={{ py: 1.5, px: 3, fontWeight: 600 }}
              >
                Quay l·∫°i trang ch·ªß
              </Button>
            </Box>
          </Box>
        );

      case 'expired':
        return (
          <Box sx={{ textAlign: 'center' }}>
            <Schedule sx={{ fontSize: 64, color: 'warning.main', mb: 3 }} />
            <Typography variant="h4" sx={{ fontWeight: 700, mb: 2, color: 'warning.main' }}>
              Li√™n k·∫øt ƒë√£ h·∫øt h·∫°n
            </Typography>
            <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
              {message}
            </Typography>
            <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>
              <Button
                variant="contained"
                startIcon={<Refresh />}
                onClick={handleResendEmail}
                disabled={!canResend}
                sx={{
                  py: 1.5,
                  px: 3,
                  fontWeight: 600,
                  background: 'linear-gradient(135deg, #0077be 0%, #004c8b 100%)',
                  '&:hover': {
                    background: 'linear-gradient(135deg, #004c8b 0%, #003366 100%)',
                  },
                }}
              >
                {canResend ? 'G·ª≠i l·∫°i email' : `G·ª≠i l·∫°i (${countdown}s)`}
              </Button>
              <Button
                variant="outlined"
                startIcon={<ArrowBack />}
                onClick={() => navigate('/')}
                sx={{ py: 1.5, px: 3, fontWeight: 600 }}
              >
                Quay l·∫°i trang ch·ªß
              </Button>
            </Box>
          </Box>
        );

      default:
        return null;
    }
  };

  return (
    <Container maxWidth="md" sx={{ py: 8 }}>
      <Paper
        elevation={10}
        sx={{
          p: 4,
          borderRadius: 4,
          background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 250, 252, 0.95) 100%)',
          backdropFilter: 'blur(20px)',
          border: '1px solid rgba(255, 255, 255, 0.2)',
        }}
      >
        {/* Header */}
        <Box sx={{ textAlign: 'center', mb: 4 }}>
          <Security sx={{ fontSize: 48, color: 'primary.main', mb: 2 }} />
          <Typography variant="h3" sx={{ fontWeight: 700, mb: 1 }}>
            X√°c Th·ª±c Email
          </Typography>
          <Typography variant="body1" color="text.secondary">
            X√°c th·ª±c t√†i kho·∫£n email c·ªßa b·∫°n
          </Typography>
        </Box>

        {/* Email Info */}
        <Card sx={{ mb: 4, bgcolor: 'primary.50', border: '1px solid', borderColor: 'primary.100' }}>
          <CardContent sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Email sx={{ color: 'primary.main' }} />
            <Box>
              <Typography variant="body2" color="text.secondary">
                Email ƒëang x√°c th·ª±c:
              </Typography>
              <Typography variant="body1" sx={{ fontWeight: 600 }}>
                {email}
              </Typography>
            </Box>
          </CardContent>
        </Card>

        {/* Main Content */}
        <Box sx={{ minHeight: 300, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
          {renderContent()}
        </Box>

        <Divider sx={{ my: 4 }} />

        {/* Help Section */}
        <Box sx={{ textAlign: 'center' }}>
          <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
            C·∫ßn h·ªó tr·ª£?
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
            N·∫øu b·∫°n g·∫∑p v·∫•n ƒë·ªÅ v·ªõi vi·ªác x√°c th·ª±c email, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i:
          </Typography>
          <Box sx={{ display: 'flex', justifyContent: 'center', gap: 4, flexWrap: 'wrap' }}>
            <Typography variant="body2" color="primary.main" sx={{ fontWeight: 600 }}>
              üìû Hotline: 1900-xxxx
            </Typography>
            <Typography variant="body2" color="primary.main" sx={{ fontWeight: 600 }}>
              üìß Email: support@busapp.com
            </Typography>
            <Typography variant="body2" color="primary.main" sx={{ fontWeight: 600 }}>
              üí¨ Chat: 24/7
            </Typography>
          </Box>
        </Box>
      </Paper>

      {/* Additional Info Cards */}
      <Box sx={{ mt: 4, display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3 }}>
        <Card sx={{ p: 3, textAlign: 'center' }}>
          <Security sx={{ fontSize: 40, color: 'primary.main', mb: 2 }} />
          <Typography variant="h6" sx={{ fontWeight: 600, mb: 1 }}>
            B·∫£o m·∫≠t t√†i kho·∫£n
          </Typography>
          <Typography variant="body2" color="text.secondary">
            X√°c th·ª±c email gi√∫p b·∫£o v·ªá t√†i kho·∫£n v√† cung c·∫•p c√°c d·ªãch v·ª• t·ªët h∆°n
          </Typography>
        </Card>

        <Card sx={{ p: 3, textAlign: 'center' }}>
          <Email sx={{ fontSize: 40, color: 'primary.main', mb: 2 }} />
          <Typography variant="h6" sx={{ fontWeight: 600, mb: 1 }}>
            Th√¥ng b√°o quan tr·ªçng
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Nh·∫≠n th√¥ng b√°o v·ªÅ chuy·∫øn ƒëi, khuy·∫øn m√£i v√† c·∫≠p nh·∫≠t d·ªãch v·ª•
          </Typography>
        </Card>
      </Box>
    </Container>
  );
};

export default EmailVerification; 